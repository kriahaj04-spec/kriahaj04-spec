import React from 'react';
import { AnalysisResult } from '../types';
import { MatchScore } from './MatchScore';
import { SkillsAnalysis } from './SkillsAnalysis';
import { Recommendations } from './Recommendations';
import { DetailedAnalysis } from './DetailedAnalysis';
import { ArrowLeft, Download, Share2 } from 'lucide-react';

interface ResultsDisplayProps {
  result: AnalysisResult;
  onReset: () => void;
}

export const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ result, onReset }) => {
  const handleDownload = () => {
    const reportContent = generateReport(result);
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'job-fit-analysis-report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateReport = (result: AnalysisResult): string => {
    return `JOB FIT ANALYSIS REPORT
========================

Match Score: ${result.matchPercentage}%
Experience Level: ${result.analysis.experienceLevel}

MATCHED SKILLS (${result.matchedSkills.length}):
${result.matchedSkills.map(skill => `• ${skill}`).join('\n')}

MISSING SKILLS (${result.missingSkills.length}):
${result.missingSkills.map(skill => `• ${skill}`).join('\n')}

KEY STRENGTHS:
${result.analysis.keyStrengths.map(strength => `• ${strength}`).join('\n')}

LEARNING RECOMMENDATIONS:
${result.recommendations.map(rec => 
  `\n${rec.skill}:\n${rec.resources.map(res => `  • ${res.platform} (${res.type}): ${res.url}`).join('\n')}`
).join('\n')}

Generated by JobFit Analyzer
Date: ${new Date().toLocaleDateString()}`;
  };

  return (
    <div className="py-8 px-4 sm:px-6 lg:px-8 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4">
          <div>
            <button
              onClick={onReset}
              className="flex items-center text-blue-600 hover:text-blue-700 mb-4 transition-colors"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              New Analysis
            </button>
            <h1 className="text-3xl font-bold text-gray-900">Job Fit Analysis Results</h1>
            <p className="text-gray-600 mt-1">Your personalized career insights and recommendations</p>
          </div>
          
          <div className="flex space-x-3">
            <button
              onClick={handleDownload}
              className="flex items-center bg-white border border-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <Download className="h-4 w-4 mr-2" />
              Download Report
            </button>
            <button className="flex items-center bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
              <Share2 className="h-4 w-4 mr-2" />
              Share Results
            </button>
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-8">
            <MatchScore percentage={result.matchPercentage} />
            <SkillsAnalysis 
              matchedSkills={result.matchedSkills}
              missingSkills={result.missingSkills}
            />
            <Recommendations recommendations={result.recommendations} />
          </div>
          
          <div>
            <DetailedAnalysis analysis={result.analysis} />
          </div>
        </div>
      </div>
    </div>
  );
};